apiVersion: v1
kind: PersistentVolume
metadata:
  name: jellyfin-pv-config   # < name of the persisant volume ("pv") in kubenetes
  namespace: jellyfin            # < namespace where place the pv
spec:
  storageClassName: ""
  capacity:
    storage: 1Gi                   # < max. size we reserve for the pv
  accessModes:
    - ReadWriteMany                # < Multiple pods can write to storage 
  persistentVolumeReclaimPolicy: Retain # < The persistent volume can reclaimed 
  hostPath:
    path: "/home/pi/applications/jellyfin/config"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: jellyfin-pv-data
  namespace: jellyfin
spec:
  storageClassName: ""
  capacity:
    storage: 50Gi                   # < max. size we reserve for the pv. A bigger value than the configdata
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/home/pi/media/movies"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jellyfin-pvc-config   # < name of the persistant volume claim ("pvc'")
  namespace: jellyfin         # < namespace where place the pvc
spec:
  storageClassName: ""
  volumeName: jellyfin-pv-nfs-config  # < the pv it will "claim" to storage. Created in the previous yaml.
  accessModes:
    - ReadWriteMany             # < Multiple pods can write to storage. Same value as pv
  volumeMode: Filesystem
  resources:
    requests:
      storage: 1Gi              # < How much data can the pvc claim from pv
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jellyfin-pvc-data
  namespace: jellyfin
spec:
  storageClassName: ""
  volumeName: jellyfin-pv-nfs-data
  accessModes:
    - ReadWriteMany
  volumeMode: Filesystem
  resources:
    requests:
      storage: 50Gi

    